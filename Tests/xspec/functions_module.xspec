<?xml version="1.0" encoding="UTF-8"?>
<!-- XSpec file for testing ${pd}/XSLT/modules/functions_module.xslt. -->
<!-- Each function should have at least one test. -->

<x:description 
  xmlns:x="http://www.jenitennison.com/xslt/xspec" 
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:atop="http://www.tei-c.org/ns/atop"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:map="http://www.w3.org/2005/xpath-functions/map" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  stylesheet="../../XSLT/modules/functions_module.xslt">
  <!--<x:helper stylesheet="../../XSLT/transpile.xslt"/>-->

  <x:scenario label="Scenarios for testing function collapse-space">
    <x:scenario label="collapse-space with lots of spaces everywhere">
      <x:call function="atop:collapse-space">
        <x:param name="pIn_string" select="'  &#x09;this  has&#x0a; lots of   spaces   '"/>
      </x:call>
      <x:expect label="All space sequences normalized to one space." select="' this has lots of spaces '"/>
    </x:scenario>
    <x:scenario label="collapse-space with no changes required">
      <x:call function="atop:collapse-space">
        <x:param name="pIn_string" select="'this has single spaces'"/>
      </x:call>
      <x:expect label="All space sequences normalized to one space." select="'this has single spaces'"/>
    </x:scenario>
  </x:scenario>

  <x:scenario label="Scenarios for testing function min-max-to-int()">
    <x:scenario label="calls to min-max-to-int that should succeed">
      <x:scenario label="defaults: 0 and 1">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'00'"/>
          <x:param name="pMaxOccurs" select="' 1'"/>
        </x:call>
        <x:expect label="sequence of (0,1)" select="( 0, 1 )"/>
      </x:scenario>
      <x:scenario label="0 and sizable number">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'00'"/>
          <x:param name="pMaxOccurs" select="'17'"/>
        </x:call>
        <x:expect label="sequence of (0,17)" select="( 0, 17 )"/>
      </x:scenario>
      <x:scenario label="0 and unbounded">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'0'"/>
          <x:param name="pMaxOccurs" select="'unbounded'"/>
        </x:call>
        <x:expect label="sequence of (0,-1)" select="( 0, -1 )"/>
      </x:scenario>
      <x:scenario label="one and one">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'01'"/>
          <x:param name="pMaxOccurs" select="'1'"/>
        </x:call>
        <x:expect label="sequence of (1,1)" select="( 1, 1 )"/>
      </x:scenario>
      <x:scenario label="1 and sizable number">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select=" '1'"/>
          <x:param name="pMaxOccurs" select="'23'"/>
        </x:call>
        <x:expect label="sequence of (1,23)" select="( 1, 23 )"/>
      </x:scenario>
      <x:scenario label="1 and unbounded">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'01'"/>
          <x:param name="pMaxOccurs" select="'unbounded'"/>
        </x:call>
        <x:expect label="sequence of (1,-1)" select="( 1, -1 )"/>
      </x:scenario>
      <x:scenario label="5 and 7">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'5'"/>
          <x:param name="pMaxOccurs" select="'7'"/>
        </x:call>
        <x:expect label="sequence of (5,7)" select="( 5, 7 )"/>
      </x:scenario>
      <x:scenario label="5 and unbounded">
        <x:call function="atop:min-max-to-int">
          <x:param name="pMinOccurs" select="'05'"/>
          <x:param name="pMaxOccurs" select="'unbounded'"/>
        </x:call>
        <x:expect label="sequence of (5,-1)" select="( 5, -1 )"/>
      </x:scenario>
    </x:scenario>
    <x:scenario label="calls to min-max-to-int that should cause an error">
      <!-- Later. â€”Syd -->
    </x:scenario>
  </x:scenario>

  <x:scenario label="Scenarios for testing get-attribute-qname">
    <x:scenario label="for an attDef with explicit @ns">
      <x:call function="atop:get-attribute-qname">
        <x:param name="attDef" as="element(tei:attDef)" select="/tei:attDef">
          <tei:attDef ident="foobar" ns="http://example.com/ns"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a namespace URI part that equals the value of the @ns attribute"
                test="namespace-uri-from-QName($x:result) eq 'http://example.com/ns'"/>
    </x:scenario>
    <x:scenario label="for an attDef without an explicit @ns">
      <x:call function="atop:get-attribute-qname">
        <x:param name="attDef" as="element(tei:attDef)" select="/tei:attDef">
          <tei:attDef ident="foobar"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a namespace URI part that equals the empty string"
                test="namespace-uri-from-QName($x:result) eq ''"/>
    </x:scenario>
    <x:scenario label="for an attDef with an alternate identifier">
      <x:call function="atop:get-attribute-qname">
        <x:param name="attDef" as="element(tei:attDef)" select="/tei:attDef">
          <tei:attDef ident="foo">
            <tei:altIdent>bar</tei:altIdent>
          </tei:attDef>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a name part that equals the value of the altIdent child element"
                test="local-name-from-QName($x:result) eq 'bar'"/>
    </x:scenario>
    <x:scenario label="for an attDef with no alternate identifier">
      <x:call function="atop:get-attribute-qname">
        <x:param name="attDef" as="element(tei:attDef)" select="/tei:attDef">
          <tei:attDef ident="foo"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a name part that equals the value of the @ident attribute"
                test="local-name-from-QName($x:result) eq 'foo'"/>
    </x:scenario>
  </x:scenario>
  

  <x:scenario label="Scenarios for testing get-element-qname">
    <x:scenario label="for an elementSpec with explicit @ns">
      <x:call function="atop:get-element-qname">
        <x:param name="elementSpec" as="element(tei:elementSpec)" select="/tei:elementSpec">
          <tei:elementSpec ident="foobar" ns="http://example.com/ns"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a namespace URI part that equals the value of the @ns attribute"
                test="namespace-uri-from-QName($x:result) eq 'http://example.com/ns'"/>
    </x:scenario>
    <x:scenario label="for an elementSpec with inherited @ns">
      <x:call function="atop:get-element-qname">
        <x:param name="elementSpec" as="element(tei:elementSpec)" select="/tei:schemaSpec/tei:elementSpec">
          <tei:schemaSpec ns="http://example.com/ns">
            <tei:elementSpec ident="foobar"/>
          </tei:schemaSpec>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a namespace URI part that equals the value of the @ns attribute"
                test="namespace-uri-from-QName($x:result) eq 'http://example.com/ns'"/>
    </x:scenario>
    <x:scenario label="for an elementSpec without @ns">
      <x:call function="atop:get-element-qname">
        <x:param name="elementSpec" as="element(tei:elementSpec)" select="/tei:elementSpec">
          <tei:elementSpec ident="foobar"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a namespace URI part that equals TEI namespace URI"
                test="namespace-uri-from-QName($x:result) eq 'http://www.tei-c.org/ns/1.0'"/>
    </x:scenario>
    <x:scenario label="for an elementSpec without an alternate identifier">
      <x:call function="atop:get-element-qname">
        <x:param name="elementSpec" as="element(tei:elementSpec)" select="/tei:elementSpec">
          <tei:elementSpec ident="foobar"/>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a name part that equals the @ident attribute"
                test="local-name-from-QName($x:result) eq 'foobar'"/>
    </x:scenario>
    <x:scenario label="for an elementSpec with an alternate identifier">
      <x:call function="atop:get-element-qname">
        <x:param name="elementSpec" as="element(tei:elementSpec)" select="/tei:elementSpec">
          <tei:elementSpec ident="foo">
            <tei:altIdent>bar</tei:altIdent>
          </tei:elementSpec>
        </x:param>
      </x:call>
      <x:expect label="returns a QName with a name part that equals the child altIdent element"
                test="local-name-from-QName($x:result) eq 'bar'"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="Scenarios for testing atop:get-element-pattern-name">
    <x:scenario label="Situation where both element and schemaSpec have @prefix">
      <x:call function="atop:get-element-pattern-name">
        <x:param name="pSpec" as="element(tei:elementSpec)" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='generic']/tei:elementSpec[@ident='hi']"/>
      </x:call>
      <x:expect label="Constructed pattern name." select="'generichi'"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="Scenarios for testing atop:unique-ident">
    <x:scenario label="Situation where no @ident is in scope" catch="yes">
      <x:call function="atop:unique-ident">
        <x:param name="pSpec">
          <tei:elementSpec/>
        </x:param>
      </x:call>
      <x:expect label="Map including an error message." test="$x:result?err?code eq QName('http://www.tei-c.org/ns/atop', 'error-noIdentInScope')"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="Scenarios for testing atop:get-class-members">
    <x:scenario label="Simple case: one class, no complexity.">
      <x:call function="atop:get-class-members">
        <x:param name="pClassSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']/tei:classSpec[@ident='att.noChildClasses']"/>
        <x:param name="pSchemaSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']"/>
        <x:param name="pClassSpecSeen" select="()"/>
      </x:call>
      <x:expect label="The elSimple element" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']/tei:elementSpec[@ident='elSimple']"/>
    </x:scenario>
    <x:scenario label="More complex case: nested classes, multiple elements">
      <x:call function="atop:get-class-members">
        <x:param name="pClassSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']/tei:classSpec[@ident='att.parentClass']"/>
        <x:param name="pSchemaSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']"/>
        <x:param name="pClassSpecSeen" select="()"/>
      </x:call>
      <x:expect label="The elSimple element" href="test_odd_components.odd" 
        select="(//tei:schemaSpec[@ident='classMembership']/tei:elementSpec[@ident='elNestedClass1'], 
        //tei:schemaSpec[@ident='classMembership']/tei:elementSpec[@ident='elNestedClass2'])"/>
    </x:scenario>
    <x:scenario label="Nested class but running on the child class.">
      <x:call function="atop:get-class-members">
        <x:param name="pClassSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']/tei:classSpec[@ident='att.childClass']"/>
        <x:param name="pSchemaSpec" href="test_odd_components.odd" select="//tei:schemaSpec[@ident='classMembership']"/>
        <x:param name="pClassSpecSeen" select="()"/>
      </x:call>
      <x:expect label="The elSimple element" href="test_odd_components.odd" 
        select="//tei:schemaSpec[@ident='classMembership']/tei:elementSpec[@ident='elNestedClass1']"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="Scenarios for testing atop:repeat-content">
    <x:scenario label="Simple test with a single item without min or max parameters.">
      <x:call template="atop:repeat-content">
        <x:param name="pContent" as="element(rng:ref)" select="/rng:ref">
          <rng:ref name="foobar"/>
        </x:param>
      </x:call>
      <x:expect label="One instance plus a zero-or-more" test="$x:result[1][self::rng:ref] => count()" select="1"/>
    </x:scenario>
    <x:scenario label="Simple test with a single item one to unbounded.">
      <x:call template="atop:repeat-content">
        <x:param name="pContent" as="element(rng:ref)" select="/rng:ref">
          <rng:ref name="foobar"/>
        </x:param>
        <x:param name="pMinOccurrence" as="xs:integer?" select="1"/>
        <x:param name="pMaxOccurrence" as="xs:string?" select="'unbounded'"/>
      </x:call>
      <x:expect label="One instance plus a zero-or-more" test="$x:result[1][self::rng:ref] and $x:result[2][self::rng:zeroOrMore]"/>
    </x:scenario>
    <x:scenario label="Simple test with a single item two to five.">
      <x:call template="atop:repeat-content">
        <x:param name="pContent" as="element(rng:ref)" select="/rng:ref">
          <rng:ref name="foobar"/>
        </x:param>
        <x:param name="pMinOccurrence" as="xs:integer?" select="2"/>
        <x:param name="pMaxOccurrence" as="xs:string?" select="'5'"/>
      </x:call>
      <x:expect label="Two instances of the pContent" test="$x:result[1][self::rng:ref] and $x:result[2][self::rng:ref]"/>
      <x:expect label="Three optionals containing the pContent" test="$x:result[self::rng:optional][child::rng:ref] => count()" select="3"/>
    </x:scenario>
    
  </x:scenario>
  
  <x:scenario label="Scenarios for testing atop:resolve-uri()">
    <x:scenario label="Simple test with TEI Vault version and no context">
      <x:call function="atop:resolve-uri">
        <x:param name="pUri" as="xs:anyURI" select="xs:anyURI('tei:4.4.2')"/>
        <x:param name="pContext" as="node()?"/>
      </x:call>
      <x:expect label="Expanded URI" select="'https://www.tei-c.org/Vault/P5/4.4.2/xml/tei/odd/p5subset.xml'"/>
    </x:scenario>
    <x:scenario label="Simple test with ill-formed TEI Vault version" catch="yes">
      <x:call function="atop:resolve-uri">
        <x:param name="pUri" as="xs:anyURI" select="xs:anyURI('tei:4.4.')"/>
        <x:param name="pContext" as="node()?"/>
      </x:call>
      <x:expect label="Map including an error message." test="$x:result?err?code eq QName('http://www.tei-c.org/ns/atop', 'error-invalidOrMalformedURI')"/>
    </x:scenario>
    <x:scenario label="Simple case with private URI scheme">
      <x:call function="atop:resolve-uri">
        <x:param name="pUri" as="xs:anyURI" select="xs:anyURI('mol:HOLM3')"/>
        <x:param name="pContext" as="node()">
          <tei:listPrefixDev>
            <tei:prefixDef ident="mol" matchPattern="(.+)" replacementPattern="https://mapoflondon.uvic.ca/$1.htm"/>
          </tei:listPrefixDev>            
        </x:param>
      </x:call>
      <x:expect label="Expanded URI" select="'https://mapoflondon.uvic.ca/HOLM3.htm'"/>
    </x:scenario>
    <x:scenario label="Unresolvable case where the input should be returned">
      <x:call function="atop:resolve-uri">
        <x:param name="pUri" as="xs:anyURI" select="xs:anyURI('notmol:HOLM3')"/>
        <x:param name="pContext" as="node()">
            <tei:listPrefixDev>
              <tei:prefixDef ident="mol" matchPattern="(.+)" replacementPattern="https://mapoflondon.uvic.ca/$1.htm"/>
            </tei:listPrefixDev>
        </x:param>
      </x:call>
      <x:expect label="Expanded URI" select="'notmol:HOLM3'"/>      
    </x:scenario>
    <x:scenario label="Simple case with external URL">
      <x:call function="atop:resolve-uri">
        <x:param name="pUri" as="xs:anyURI" select="xs:anyURI('http://example.com')"/>
        <x:param name="pContext" as="node()?"/>
      </x:call>
      <x:expect label="Expanded URI" select="'http://example.com'"/>
    </x:scenario> 
  </x:scenario> 
  
  <x:scenario label="Scenarios for testing atop:get-nearest-ns">
    <x:variable name="allTeiNoNs" as="element(tei:schemaSpec)">
      <tei:schemaSpec>
        <tei:desc>Some info</tei:desc>
        <tei:classSpec ident="att.things"/>
        <tei:elementSpec ident="div">
          <tei:attList>
            <tei:attDef ident="type"/>
          </tei:attList>
        </tei:elementSpec>
      </tei:schemaSpec>
    </x:variable>
    <x:variable name="someTeiSomeHtml" as="element(tei:schemaSpec)">
      <tei:schemaSpec ns="http://www.tei-c.org/ns/1.0">
        <tei:desc>Some info</tei:desc>
        <tei:classSpec ident="att.things"/>
        <tei:elementSpec ident="blockquote" ns="http://www.w3.org/1999/xhtml">
          <tei:attList>
            <tei:attDef ident="style"/>
            <tei:attDef ident="customAtt" ns="http://www.tei-c.org/ns/atop"/>
          </tei:attList>
        </tei:elementSpec>
      </tei:schemaSpec>
    </x:variable>
    <x:scenario label="Simple case with attDef">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$allTeiNoNs//tei:attDef"/>
      </x:call>
      <x:expect label="Empty namespace" select="''"/>
    </x:scenario>
    <x:scenario label="Simple case with element">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$allTeiNoNs//tei:elementSpec"/>
      </x:call>
      <x:expect label="TEI namespace" select="'http://www.tei-c.org/ns/1.0'"/>
    </x:scenario>
    <x:scenario label="Simple case with classSpec">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$allTeiNoNs//tei:classSpec"/>
      </x:call>
      <x:expect label="TEI namespace" select="'http://www.tei-c.org/ns/1.0'"/>
    </x:scenario>
    <x:scenario label="Simple case with other context">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$allTeiNoNs//tei:desc"/>
      </x:call>
      <x:expect label="TEI namespace" select="'http://www.tei-c.org/ns/1.0'"/>
    </x:scenario>
    <x:scenario label="Case with attDef without ns">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$someTeiSomeHtml//tei:attDef[not(@ns)]"/>
      </x:call>
      <x:expect label="Empty namespace" select="''"/>
    </x:scenario>
    <x:scenario label="Case with attDef with ns">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$someTeiSomeHtml//tei:attDef[@ns='http://www.tei-c.org/ns/atop']"/>
      </x:call>
      <x:expect label="Empty namespace" select="'http://www.tei-c.org/ns/atop'"/>
    </x:scenario>
    <x:scenario label="Case with element with ns">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$someTeiSomeHtml//tei:elementSpec"/>
      </x:call>
      <x:expect label="TEI namespace" select="'http://www.w3.org/1999/xhtml'"/>
    </x:scenario>
    <x:scenario label="Simple case with classSpec">
      <x:call function="atop:get-nearest-ns">
        <x:param name="pEl" select="$someTeiSomeHtml//tei:classSpec"/>
      </x:call>
      <x:expect label="TEI namespace" select="'http://www.tei-c.org/ns/1.0'"/>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="Tests for the global sch:ns map.">
    <x:scenario label="Simple test with a few uncomplicated cases.">
      <x:call function="atop:get-sch-ns-prefix-map">
        <x:param name="pContext" as="element(tei:constraint)" select="/tei:constraint">
          <tei:constraint>
            <sch:ns prefix="notTei" uri="http://www.tei-c.org/ns/1.0/not"/>
            <sch:ns prefix="notXh" uri="http://www.w3.org/1999/xhtml/not"/>
            <sch:ns prefix="notAtop" uri="http://www.tei-c.org/ns/atop/not"/>
          </tei:constraint>
        </x:param>
      </x:call>
      <x:expect label="Our notXh prefix should get our notXh uri." test="map:get($x:result[1], 'notXh')" select="'http://www.w3.org/1999/xhtml/not'"/>
      <x:expect label="Our notTei uri should get our notTei prefix." test="map:get($x:result[1], 'http://www.tei-c.org/ns/1.0/not')" select="'notTei'"/>
    </x:scenario>
  </x:scenario>
  
</x:description>
