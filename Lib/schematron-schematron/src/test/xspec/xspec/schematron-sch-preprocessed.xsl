<?xml version="1.0" encoding="UTF-8"?><xsl:transform xmlns:error="https://doi.org/10.5281/zenodo.1495494#error" xmlns:fn="tag:dmaus@dmaus.name,2022:Schematron-Schematron" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:schxslt="https://doi.org/10.5281/zenodo.1495494" xmlns:schxslt-api="https://doi.org/10.5281/zenodo.1495494#api" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xml:base="file:/home/dmaus/projects/schematron/schematron-schematron/src/main/resources/content/schematron.sch" version="3.0"><rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" xmlns:skos="http://www.w3.org/2004/02/skos/core#"><dct:creator><dct:Agent><skos:prefLabel>SchXslt/${project.version} SAXON/EE 10.6</skos:prefLabel><schxslt.compile.typed-variables xmlns="https://doi.org/10.5281/zenodo.1495494#">true</schxslt.compile.typed-variables></dct:Agent></dct:creator><dct:created>2023-07-26T15:23:50.389+02:00</dct:created></rdf:Description><xsl:output indent="yes"/><xsl:include href="functions.xsl"/><xsl:param name="queryBinding" select="'xslt2'"/><xsl:template match="root()"><xsl:variable name="metadata" as="element()?"/><xsl:variable name="report" as="element(schxslt:report)"><schxslt:report><xsl:call-template name="d84e19"/></schxslt:report></xsl:variable><xsl:variable name="schxslt:report" as="node()*"><xsl:sequence select="$metadata"/><xsl:for-each select="$report/schxslt:document"><xsl:for-each select="schxslt:pattern"><xsl:sequence select="node()"/><xsl:sequence select="../schxslt:rule[@pattern = current()/@id]/node()"/></xsl:for-each></xsl:for-each></xsl:variable><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><svrl:ns-prefix-in-attribute-values prefix="fn" uri="tag:dmaus@dmaus.name,2022:Schematron-Schematron"/><svrl:ns-prefix-in-attribute-values prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/><svrl:ns-prefix-in-attribute-values prefix="xsl" uri="http://www.w3.org/1999/XSL/Transform"/><xsl:sequence select="$schxslt:report"/></svrl:schematron-output></xsl:template><xsl:template match="text() | @*" mode="#all" priority="-10"/><xsl:template match="/" mode="#all" priority="-10"><xsl:apply-templates mode="#current" select="node()"/></xsl:template><xsl:template match="*" mode="#all" priority="-10"><xsl:apply-templates mode="#current" select="@*"/><xsl:apply-templates mode="#current" select="node()"/></xsl:template><xsl:mode use-accumulators="#all"/><xsl:mode name="d84e19" use-accumulators="#all"/><xsl:template name="d84e19"><schxslt:document><schxslt:pattern id="d84e19"><xsl:if test="exists(base-uri(root()))"><xsl:attribute name="documents" select="base-uri(root())"/></xsl:if><xsl:for-each select="root()"><svrl:active-pattern xmlns:svrl="http://purl.oclc.org/dsdl/svrl" name="embedded" id="embedded"><xsl:attribute name="documents" select="base-uri(.)"/></svrl:active-pattern></xsl:for-each></schxslt:pattern><schxslt:pattern id="d84e41"><xsl:if test="exists(base-uri(root()))"><xsl:attribute name="documents" select="base-uri(root())"/></xsl:if><xsl:for-each select="root()"><svrl:active-pattern xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><xsl:attribute name="documents" select="base-uri(.)"/></svrl:active-pattern></xsl:for-each></schxslt:pattern><xsl:apply-templates mode="d84e19" select="root()"/></schxslt:document></xsl:template><xsl:template match="sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select" priority="1" mode="d84e19"><xsl:param name="schxslt:patterns-matched" as="xs:string*"/><xsl:variable name="queryBinding" select="lower-case((ancestor::sch:schema/@queryBinding, $queryBinding, 'xslt')[1])"/><xsl:variable name="result" select="fn:validate-xpath(., $queryBinding)"/><xsl:variable name="invalid-fn" select="fn:find-invalid-functions(fn:get-xpath-functions($result, $queryBinding), $queryBinding)"/><xsl:choose><xsl:when test="$schxslt:patterns-matched[. = 'd84e19']"><schxslt:rule pattern="d84e19"><xsl:comment xmlns:svrl="http://purl.oclc.org/dsdl/svrl">WARNING: Rule for context "sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select" shadowed by preceding rule</xsl:comment><svrl:suppressed-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><xsl:attribute name="context">sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select</xsl:attribute></svrl:suppressed-rule></schxslt:rule><xsl:next-match><xsl:with-param name="schxslt:patterns-matched" as="xs:string*" select="$schxslt:patterns-matched"/></xsl:next-match></xsl:when><xsl:otherwise><schxslt:rule pattern="d84e19"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><xsl:attribute name="context">sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select</xsl:attribute></svrl:fired-rule><xsl:if test="$result[self::ERROR]"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" location="{path(.)}" id="syntax-error"><xsl:attribute name="test">$result[self::ERROR]</xsl:attribute><svrl:text>
        <xsl:value-of select="$result[self::ERROR]"/>
      </svrl:text></svrl:successful-report></xsl:if><xsl:if test="exists($invalid-fn)"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" location="{path(.)}" role="WARNING" id="unknown-function"><xsl:attribute name="test">exists($invalid-fn)</xsl:attribute><svrl:text>
        The XPath expression may contain one or more unknown function: <xsl:value-of select="fn:pretty-print-function($invalid-fn)"/>.
      </svrl:text></svrl:successful-report></xsl:if></schxslt:rule><xsl:next-match><xsl:with-param name="schxslt:patterns-matched" as="xs:string*" select="($schxslt:patterns-matched, 'd84e19')"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select" priority="0" mode="d84e19"><xsl:param name="schxslt:patterns-matched" as="xs:string*"/><xsl:variable name="schema" select="ancestor::sch:schema"/><xsl:variable name="queryBinding" select="lower-case((ancestor::sch:schema/@queryBinding, $queryBinding, 'xslt')[1])"/><xsl:variable name="result" select="fn:validate-xpath(., $queryBinding)"/><xsl:variable name="bound-ns" select="($schema/sch:ns/@prefix, 'xml')"/><xsl:variable name="unbound-ns" select="fn:get-qname-prefixes($result)[not(. = $bound-ns)]"/><xsl:choose><xsl:when test="$schxslt:patterns-matched[. = 'd84e41']"><schxslt:rule pattern="d84e41"><xsl:comment xmlns:svrl="http://purl.oclc.org/dsdl/svrl">WARNING: Rule for context "sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select" shadowed by preceding rule</xsl:comment><svrl:suppressed-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><xsl:attribute name="context">sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select</xsl:attribute></svrl:suppressed-rule></schxslt:rule><xsl:next-match><xsl:with-param name="schxslt:patterns-matched" as="xs:string*" select="$schxslt:patterns-matched"/></xsl:next-match></xsl:when><xsl:otherwise><schxslt:rule pattern="d84e41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"><xsl:attribute name="context">sch:rule/@context | sch:assert/@test | sch:report/@test | sch:value-of/@select | sch:let/@value | sch:name/@path | sch:pattern/@documents | xsl:copy-of/@select</xsl:attribute></svrl:fired-rule><xsl:if test="exists($unbound-ns)"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" location="{path(.)}" role="WARNING" id="unbound-qname-ns"><xsl:attribute name="test">exists($unbound-ns)</xsl:attribute><svrl:text>
        The XPath expression may contain one or more unbound namespace prefixes: <xsl:value-of select="$unbound-ns"/>.
      </svrl:text></svrl:successful-report></xsl:if></schxslt:rule><xsl:next-match><xsl:with-param name="schxslt:patterns-matched" as="xs:string*" select="($schxslt:patterns-matched, 'd84e41')"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template></xsl:transform>