<project basedir=".">
  <description>
    This is the base ant build file for the ATOP project. Eventually it will
    provide one access method for all build and test functionality. At 
    present it just has a few targets we are using in the early development
    phase of ATOP.
  </description>

  <!-- We need ant-contrib to do foreach.   -->
  <!--
      Note: We expect the 4 ATOP developers to have ant-contrib
      installed. If & when an ant build process is delivered to users,
      we should consider including the ant-contrib library in our Lib/
      so that users do not have to download it.
  -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!-- We validate against closed schema with Jing. -->
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
    <classpath location="Lib/jing.jar"/>
  </taskdef>
  
  <property name="inputTestOdd" value="${basedir}/Tests/resources/in_vitro_ODDs/transpile.odd"/>
  <basename property="oddName" file="${inputTestOdd}" suffix=".odd"/>
  
  <property name="stylesheetsPath" value="/home/syd/Documents/Stylesheets/home/syd/Documents/Stylesheets"/>

  <fileset id="xspec-files" dir="Tests/xspec" includes="*.xspec"/>

  <condition property="isWindows">
    <os family="windows" />
  </condition>
  
  <condition property="isUnix">
    <os family="unix" />
  </condition>
  
  <target name="setWindowsAntPath" if="isWindows">
    <property name="antPath" value="${ant.home}/bin/ant.bat" />
  </target>
  
  <target name="setUnixAntPath" if="isUnix">
    <property name="antPath" value="ant" />
  </target>
  
  <target name="test.xspec" description="Run all XSpec tests" depends="setWindowsAntPath, setUnixAntPath">
    <description>
      TARGET test.xspec
      This target is intended to run all XSpec tests by creating an ant build
      file which then runs the XSpec project's build file passing the parameter
      files containing our tests. [Note: this is not working as of 2022-10-25,
      possibly because of the switch to Saxon 11.]
    </description>
    <pathconvert refid="xspec-files" property="xspec.files" pathsep=" "/>
    <xslt style="Tests/xspec-runner.xslt" in="build.xml" out="Tests/xspec-runner.xml">
      <classpath location="${basedir}/Lib/saxon/saxon-he-11.jar"/>
      <param name="files" expression="${xspec.files}"/>
    </xslt>
    <!--<subant antfile="xspec-runner.xml" buildpath="Tests" target="xspec-runner"/>-->
    <exec executable="${antPath}" dir="Tests">
      <arg value="-f"/>
      <arg file="${basedir}/Tests/xspec-runner.xml"/>
      <arg value="-Dbuildpath=${basedir}/Tests"/>
      <arg line="-lib ${basedir}/Lib/saxon"/>
      <arg value="xspec-runner"/>
    </exec>
  </target>

  <target name="transpile" description="Run the experimental transpiler through Morgana">
    <mkdir dir="output"/>
    <echo message="Processing ${oddName}.odd to output/${oddName}.rng"/>
    <java failonerror="true" fork="true" classname="com.xml_project.morganaxproc3.XProcEngine" dir="${basedir}">
      <classpath>
        <pathelement location="${basedir}/Lib/morgana/MorganaXProc-IIIse.jar"/>
        <pathelement location="${basedir}/Lib/morgana/MorganaXProc-IIIse_lib/*" />
      </classpath>
      <arg value="-config=${basedir}/Lib/morgana/config.xml"/>
      <arg value="${basedir}/Util/pipeline.xpl"/>
      <arg value="-option:teiOddSpecification=${inputTestOdd}"/>
      <arg value="-output:result=${basedir}/output/${oddName}.rng"/>
    </java>
    <jing rngfile="Schemas/relaxng.rnc" compactsyntax="true">
      <fileset file="output/${oddName}.rng"/>
    </jing>
  </target>

  <!-- targets for generating PLODD test files to test the
       PLODD-to-RNG process before we have actually written the
       customization-to-PLODD process. I.e., this chunk is not
       intended to be permanent or user-facing. (Although it might
       grow up in the futuire.)
  -->

    <target name="odds2plodds" depends="preplodd,copy_ODDs,deriveAll,transformAll,validateResults"/>

  <!--
    This method of doing things (copy ODDs to /tmp/CODDs/, run old stylesheets
    on those ODDs to produce derived ODDs in the same dir, then convert them into
    PLODDs in a different directory (/tmp/PLODDs/) was how I originally did this
    in bash, and my not be the “right” way to do this in ant. I did this in order
    to transform an entire directory at once in Saxon, thus saving dramatically
    on Java spin-up time. But that is not necessary in ant, is it? —Syd, 2022-12-07    
  -->

  <target name="preplodd">
    <echo>=== Sweepy, sweepy, sweepy</echo>
    <delete dir="/tmp/CODDs"/>
    <delete dir="/tmp/PLODDs"/>
  </target>

  <target name="copy_ODDs">
    <echo>=== Copying ODDs ...</echo>
    <mkdir dir="/tmp/CODDs"/>
    <mkdir dir="/tmp/PLODDs"/>
    <copy todir="/tmp/CODDs">
      <fileset dir="." includes="**/*.odd"/>
      <flattenmapper/>
    </copy>
  </target>

  <target name="deriveAll">
    <echo>=== derive all</echo>
    <foreach target="derive" param="inFile" parallel="true">
      <path>
        <fileset dir="/tmp/CODDs" includes="*.odd"/>
      </path>
    </foreach>
  </target>
  <target name="derive">
    <echo message="deriving ${inFile}"/>
    <?syd /path/to/Stylesheets/bin/teitoodd --odd --debug $f `basename $f .odd`.derodd ?>
    <basename file="${inFile}" property="plainFileName" suffix=".odd"/>
    <property name="outFile" value="/tmp/CODDs/${plainFileName}.derodd"/>
    <exec executable="${stylesheetsPath}/bin/teitoodd">
      <arg value="--odd"/>
      <!-- arg value="- - debug"/-->
      <arg value="${inFile}"/>
      <arg value="${outFile}"/>
    </exec>
  </target>

  <target name="transformAll">
    <echo>=== transform all</echo>
    <foreach target="transform" param="inFile" parallel="true">
      <path>
        <fileset dir="/tmp/CODDs" includes="*.derodd"/>
      </path>
    </foreach>
  </target>
  <target name="transform">
    <echo message="pruning ${inFile}"/>
    <basename file="${inFile}" property="plainFileName" suffix=".derodd"/>
    <property name="outFile" value="/tmp/PLODDs/${plainFileName}.odd"/>
    <xslt style="XSLT/prune_compiled_to_PLODD.xslt" in="${inFile}" out="${outFile}">
      <classpath location="Lib/saxon/saxon-he-11.jar"/>
    </xslt>
  </target>
  
  <target name="validateResults">
    <echo>=== validate output files</echo>
    <jing rngfile="Schemas/ploddSchemaSpecification.rng">
      <fileset dir="/tmp/PLODDs" includes="*.odd"/>
    </jing>
  </target>

</project>
