<project basedir=".">
  <description>
    This is the base ant build file for the ATOP project. Eventually it will
    provide one access method for all build and test functionality. At 
    present it just has a few targets we are using in the early development
    phase of ATOP.
  </description>
  
  <!-- Globals file which defines various properties and also imports build.properties. -->
  <import file="buildGlobals.xml"/>
  
  <basename property="ploddName" file="${inputPlodd}" suffix=".plodd"/>
  
  <!-- Any single Schematron file we want to compile and use. -->
  <property name="schSchemaFile" value=""/>
  
  <target name="compileSchematron">
    <description>
      TARGET compileSchematron
      This uses the schxslt XSLT to compile a Schematron file
      into XSLT which can then be used for validation.
    </description>
    <echo message="Compiling ${schSchemaFile} into XSLT..."/>
    <!-- Properties derived from the Schematron input file. -->
    <basename property="schSchemaName" file="${schSchemaFile}" suffix=".sch"/>
    <dirname property="schSchemaDir" file="${schSchemaFile}"/>
    <java jar="${saxon}" fork="true" failonerror="true">
      <arg line="-s:${schSchemaFile}"/>
      <arg line="-o:${schSchemaDir}/${schSchemaName}_sch.xslt"/>
      <arg line="-xsl:'${schxsltCompiler}'"/>
    </java>
  </target>

  <target name="transpile" description="Run the experimental transpiler through Morgana">
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Processing ${inputPlodd} to ${ploddDir}/${ploddName}.rng"/>
    <java failonerror="true" fork="true" classname="com.xml_project.morganaxproc3.XProcEngine" dir="${basedir}">
      <classpath>
        <pathelement location="${basedir}/Lib/morgana/MorganaXProc-IIIse.jar"/>
        <pathelement location="${basedir}/Lib/morgana/MorganaXProc-IIIse_lib/*" />
      </classpath>
      <arg value="-config=${basedir}/Lib/morgana/config.xml"/>
      <arg value="${basedir}/Util/pipeline.xpl"/>
      <arg value="-option:teiOddSpecification=${inputPlodd}"/>
      <arg value="-output:result=${ploddDir}/${ploddName}.rng"/>
      <arg value="-output:schematron=${ploddDir}/${ploddName}.sch"/>
    </java>
  </target>
  
  <target name="preclean" description="Clean out the results of any previous runs">
    <description>
      TARGET preClean
      This target is designed to clean out the results of any previous processing
      runs so that they don't get in the way or get re-transformed.
    </description>
    
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Cleaning out detritus generated by prior builds from ${ploddDir}."/>
    <delete dir="${ploddDir}">
      <include name="*_preprocessed.plodd"/>
      <include name="*.svrl"/>
      <include name="*_svrl.txt"/>
    </delete>
  </target>
  
  <target name="preValidatePloddWithSch" description="Validate the incoming PLODD with Schematron.">
    <description>
      TARGET preValidatePloddWithSch
      This target validates the incoming unprocessed PLODD file with a local Schematron schema.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <antcall target="compileSchematron">
      <param name="schSchemaFile" value="${basedir}/Schemas/pre-transpile.sch"/>
    </antcall>
    <echo message="Validate ${ploddDir}/${ploddName}.plodd with pre-transpile.sch."/>
    <echo message="Process ${ploddDir}/${ploddName}.plodd with compiles pre-transpile_sch.xslt."/>
    <!-- Generate the SVRL needed. -->
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/Schemas/pre-transpile_sch.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}.plodd"/>
      <arg value="-o:${ploddDir}/${ploddName}.svrl"/>
    </java>
    <!-- Process with SVRL parser. -->
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/XSLT/svrl2msgs.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}.svrl"/>
      <arg value="-o:${ploddDir}/${ploddName}_svrl.txt"/>
    </java>
    <!-- Read the output to see if there's anything there. Make it quiet so
         there's no error message when the file is empty. -->
    <loadfile property="svrlMessages" srcFile="${ploddDir}/${ploddName}_svrl.txt" quiet="true"/>
    <!-- Fail if there's anything in the file other than a linebreak. -->
    <fail message="${ploddDir}/${ploddName}.plodd: ${svrlMessages}">
      <condition>
        <length length="2" string="${svrlMessages}" when="gt"/>
      </condition>
    </fail>
  </target>
  
  <target name="preValidatePloddWithRng" description="Validate the incoming PLODD with RELAXNG.">
    <description>
      TARGET preValidatePloddWithRng
      This target validates the incoming unprocessed PLODD file with a local RELAXNG schema.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Validating ${ploddDir}/${ploddName}.plodd with ../Schemas/ploddSchemaSpecification.rng"/>
    <jing rngfile="${basedir}/Schemas/ploddSchemaSpecification.rng" failonerror="true">
      <fileset file="${ploddDir}/${ploddName}.plodd"/>
    </jing>
    
  </target>
  
  <target name="preprocessPlodd" description="Do some minor preprocessing on the PLODD file before the transpile stage.">
    <description>
      TARGET preprocessPlodd
      This target runs some XSLT to do minor fix-ups on the PLODD file before the full transpile is run.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Preprocessing ${ploddDir}/${ploddName}.plodd to ${ploddDir}/${ploddName}_preprocessed.plodd"/>
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/XSLT/pre-transpile.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}.plodd"/>
      <arg value="-o:${ploddDir}/${ploddName}_preprocessed.plodd"/>
    </java>
  </target>
  
  <target name="ploddToRng" description="Do the final transpile to create RNG/SCH from the preprocessed PLODD file.">
    <description>
      TARGET ploddToRng
      This runs the final transpile of the preprocessed PLODD to output a RELAX NG file 
      incorporating Schematron.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Preprocessing ${ploddDir}/${ploddName}_preprocessed.plodd to ${ploddDir}/${ploddName}.rng"/>
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/XSLT/transpile.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}_preprocessed.plodd"/>
      <arg value="-o:${ploddDir}/${ploddName}.rng"/>
    </java>
  </target>
  
  <target name="extractSchematron" description="Extract the Schematron from the RELAXNG file.">
    <description>
      TARGET extractSchematron
      This target extracts the Schematron (if any) from the RELAXNG file generated from 
      a PLODD, and outputs it to a Schematron file with the same name.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Extracting Schematron from ${ploddDir}/${ploddName}.rng to ${ploddDir}/${ploddName}.sch"/>
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/XSLT/extract-schematron.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}.rng"/>
      <arg value="-o:${ploddDir}/${ploddName}.sch"/>
    </java>
  </target>
  
  <target name="validateRngWithRnc" description="Validate generated RELAXNG with its own schema.">
    <description>
      TARGET validateRngWithRnc
      This target validates the generated RELAX NG file with its own RELAX NG (rnc) schema.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Validate ${ploddDir}/${ploddName}.rng with ../Schemas/relaxng.rnc."/>
    <jing compactsyntax="true" rngfile="${basedir}/Schemas/relaxng.rnc" failonerror="true">
      <fileset file="${ploddDir}/${ploddName}.rng"/>
    </jing>
  </target>
  
  <target name="validateSchematronWithRng" description="Validate extracted Schematron with its own schema.">
    <description>
      TARGET validateSchematronWithRng
      This target validates the extracted Schematron file with its own RELAX NG schema.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <echo message="Validate ${ploddDir}/${ploddName}.sch with ../Schemas/schematron.rng."/>
    <jing rngfile="${basedir}/Schemas/schematron.rng" failonerror="true">
      <fileset file="${ploddDir}/${ploddName}.sch"/>
    </jing>
  </target>
  
    <target name="validateSchematronWithSch" description="Validate the extracted Schematron with Schematron.">
    <description>
      TARGET validateSchematronWithSch
      This target validates an extracted Schematron file with a local Schematron schema.
    </description>
    <dirname property="ploddDir" file="${inputPlodd}"/>
    <antcall target="compileSchematron">
      <param name="schSchemaFile" value="${basedir}/Schemas/schematron.sch"/>
    </antcall>
    <echo message="Validate ${ploddDir}/${ploddName}.sch with schematron.sch."/>
    <echo message="Process ${ploddDir}/${ploddName}.sch with compiled schematron_sch.xslt."/>
    <!-- Generate the SVRL needed. -->
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/Schemas/schematron_sch.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}.sch"/>
      <arg value="-o:${ploddDir}/${ploddName}_sch.svrl"/>
    </java>
    <!-- Process with SVRL parser. -->
    <java failonerror="true" fork="true" classname="net.sf.saxon.Transform" classpath="${saxon}" dir="${basedir}">
      <arg value="-xsl:${basedir}/XSLT/svrl2msgs.xslt"/>
      <arg value="-s:${ploddDir}/${ploddName}_sch.svrl"/>
      <arg value="-o:${ploddDir}/${ploddName}_sch_svrl.txt"/>
    </java>
    <!-- Read the output to see if there's anything there. Make it quiet so
         there's no error message when the file is empty. -->
    <loadfile property="svrlMessages" srcFile="${ploddDir}/${ploddName}_sch_svrl.txt" quiet="true"/>
    <!-- Fail if there's anything in the file other than a linebreak. -->
    <fail message="${ploddDir}/${ploddName}.sch: ${svrlMessages}">
      <condition>
        <length length="2" string="${svrlMessages}" when="gt"/>
      </condition>
    </fail>
  </target>
  
  <target name="transpilePlodd" description="Run the full sequence of steps to create RNG and Schematron from a PLODD file.">
    <description>
      TARGET transpilePlodd
      This runs the sequence of steps required to check the validity of a PLODD,
      create RELAX NG and Schematron from a PLODD file, and thoroughly check the 
      results.
    </description>
    <antcall target="preclean"/>
    <antcall target="preValidatePloddWithRng"/> 
    <antcall target="preValidatePloddWithSch"/>
    <antcall target="preprocessPlodd"/>
    <antcall target="ploddToRng"/>
    <antcall target="extractSchematron"/>
    <antcall target="validateRngWithRnc"/>
    <antcall target="validateSchematronWithRng"/> 
    <antcall target="validateSchematronWithSch"/> 
  </target>
  
  <target name="test">
    <description>
      TARGET test
      This is a convenience target to run the test suite using the 
      buildTest.xml ant file.
    </description>
    <ant antfile="buildTest.xml" target="runXSpecTests"/>
    <ant antfile="buildTest.xml" target="runTranspileTests"/>
  </target>
  
  <target name="showProperties" description="Simple debug output to show the input properties and their derivations.">
    <description>
      TARGET showProperties
      This is a utility debugging target which simply echoes a number of properties
      which are passed as parameters, or are derived from those parameters.
    </description>
    <echo message="schSchemaFile = ${schSchemaFile}"/>
    <echo message="schSchemaName = ${schSchemaName}"/>
    <echo message="schSchemaDir  = ${schSchemaDir}"/>
    <echo message="schSchemaXslt = ${schSchemaXslt}"/>
  </target>


</project>
