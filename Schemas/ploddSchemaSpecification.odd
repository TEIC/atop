<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" version="4.4.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>PLODD</title>
        <author xml:id="SB">Syd Bauman</author>
        <editor xml:id="MH">Martin Holmes</editor>
        <editor xml:id="HBS">Helena Bermúdez Sabel</editor>
        <editor xml:id="DM">David Maus</editor>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI-C / ATOP project</publisher>
        <availability status="restricted">
          <licence>Made available under both the CC+BY and BSD-2
          licences; see ../LICENSE.md for details.</licence>
          <p>There are very few restrictions on copying, modifying,
          and publishing this code or variations thereof. Basically
          give credit where credit is due, and allow others to do the
          same. That said, unless you are dealing with TEI ODD files
          derived by combining one or more TEI customization ODD files
          with a markup language that is itself defined in TEI ODD, it
          is probably not a good idea to copy and use this. It is
          pretty much useless for anything else.</p>
        </availability>
      </publicationStmt>
      <sourceDesc><p>Born digital</p></sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#SB" when="2022-07-15">Per recent meeting, allow a
      limited version of <gi>moduleRef</gi>.</change>
      <change who="#SB" when="2022-06-24">Started from scratch.</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <head>Schema for derived (pruned, localized) ODD</head>
      <divGen type="toc"/>
      <div type="section">
        <head>TODO</head>
        <list>
          <item>constraint <gi>altIdent</gi> so it can have no sibling
          <gi>altIdent</gi>s (i.e., only 1 child::altiDent).</item>
        </list>
      </div>
    </front>
    <body>
      <p>One method of generating a test suite and validating it
      against this schema:</p>
      <eg xml:lang="x-bash">
        $ cd /tmp/
        $ mkdir -p CODDs PLODDs
        $ cp -p `find /path/to/atop -name '*.odd'` CODDs/
        $ ( cd CODDs ; for f in *.odd ; do echo "---------$f:" ; /path/to/Stylesheets/bin/teitoodd --odd --debug $f `basename $f .odd`.derodd ; done ; cd .. )
        $ rm CODDs/*.odd
        $ saxon -s:CODDs/ -xsl:/path/to/atop/XSLT/prune_compiled_to_PLODD.xslt -o:PLODDs/
        $ ( cd PLODDs ; for f in * ; do mv $f `basename $f .derodd.xml`.xml ; done )  # wish I could use .plodd, but Morgana objects
        $ for f in PLODDs/*.xml ; do echo "---------$f:" ; jing -i /path/to/atop/Schemas/ploddSchemaSpecification.rng $f ; echo ; done > /tmp/plodd_errors.txt 
        $ cd /path/to/atop/Lib/morgana
        $ time for f in /tmp/PLODDs/*.xml ; do o=`dirname $f`/`basename $f .xml`.rng ; ./Morgana.sh file:///home/syd/Documents/atop/Util/steps/transpile.xpl -input:source=$f -output:result=$o ; done
      </eg>
    </body>
    <back>
      <schemaSpec ident="ploddSchemaSpecification" targetLang="en"
                  docLang="en" prefix="plodd_" start="TEI schemaSpec">
        <gloss>derived schema specification</gloss>
        <desc>the ATOP derived schema document type</desc>

        <!-- ******** -->
        <!-- Modules! -->
        <!-- ******** -->
        <moduleRef key="tei"/>
        <moduleRef key="header" include="appInfo application creation
                                         fileDesc encodingDesc publicationStmt
                                         schemaRef sourceDesc teiHeader
                                         titleStmt "/>
        <moduleRef key="textstructure" include="TEI body text"/>
        <moduleRef key="core" include="abbr addrLine address
                                       analytic author bibl
                                       biblScope biblStruct choice
                                       cit citedRange date
                                       desc distinct editor
                                       email emph expan
                                       foreign gloss hi
                                       label list listBibl
                                       measure measureGrp mentioned
                                       monogr name note
                                       noteGrp num p
                                       postBox postCode ptr
                                       q quote ref
                                       relatedItem respStmt resp
                                       rs said series
                                       soCalled street term
                                       time title unit"/>
        <moduleRef key="tagdocs" except="equiv exemplum listRef
                                         remarks model modelGrp
                                         modelSequence moduleSpec param
                                         paramList paramSpec specDesc
                                         specGrp specGrpRef specList"/>

        <!-- ******************************************** -->
        <!-- General high-level constraint specifications -->
        <!-- ******************************************** -->
        <constraintSpec ident="define_RNG_annotation_namespace" scheme="schematron">
          <desc>We will be testing for <tag>a:*</tag> elements as
          allowed children of <gi>content</gi> in
          <gi>moduleRef</gi>.</desc>
          <constraint>
            <sch:ns prefix="a" uri="http://relaxng.org/ns/compatibility/annotations/1.0"/>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="no_XInclude" scheme="schematron">
          <desc>By this point in the pipeline, any and all XInclude
          processing should have already occurred. Note that this
          means that XInclude elements cannot be exemplified in their
          own namespace in an <gi>egXML</gi> (which is usually
          problematic, anyway).</desc>
          <constraint>
            <sch:ns prefix="xi" uri="http://www.w3.org/2001/XInclude"/>
            <sch:rule context="/">
              <sch:report test="//xi:*" role="fatal">There should be no XInclude elements in a derived PLODD</sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>

        <!--  -->
        <macroSpec ident="gloss_amper_desc" mode="add">
          <desc>interleave of <gi>gloss</gi> &amp; <gi>desc</gi></desc>
          <content>
            <alternate minOccurs="0" maxOccurs="1">
              <sequence minOccurs="1" maxOccurs="1">
                <classRef minOccurs="1" maxOccurs="1" key="model.glossLike"/>
                <classRef minOccurs="0" maxOccurs="1" key="model.descLike"/>
              </sequence>
              <sequence minOccurs="1" maxOccurs="1">
                <classRef minOccurs="1" maxOccurs="1" key="model.descLike"/>
                <classRef minOccurs="0" maxOccurs="1" key="model.glossLike"/>
              </sequence>
            </alternate>
          </content>
          <remarks>
            <p>Macro of PureODD code that is the equivalent of a RELAX
              NG pattern that is the interleave of 0 or 1 <gi>gloss</gi>
              and 0 or 1 <gi>desc</gi>, i.e. <code>( gloss? &amp; desc?
              )</code>.</p>
          </remarks>
        </macroSpec>
        
        <!-- ********************************************************** -->
        <!-- Alterations to <schemaSpec> itself and elements “above” it -->
        <!-- ********************************************************** -->
        <elementSpec ident="body" mode="change">
          <desc>Contains a single schema specification</desc>
          <content>
            <elementRef minOccurs="1" maxOccurs="1" key="schemaSpec"/>
          </content>
        </elementSpec>

        <elementSpec ident="schemaSpec" mode="change">
          <content>
            <macroRef key="gloss_amper_desc"/>
            <alternate minOccurs="1" maxOccurs="unbounded">
              <classRef key="model.oddDecl" minOccurs="1" maxOccurs="1"/>
              <elementRef key="moduleRef" minOccurs="1" maxOccurs="1"/>
            </alternate>
          </content>
          <constraintSpec ident="only_1_elementSpec_each" scheme="schematron">
            <constraint>
              <!-- generate sequence of the QName of each child <elementSpec> -->
              <sch:let name="elementSpecs"
                       value="for $e in ./tei:elementSpec
                              return concat('{', ($e/ancestor-or-self::*/@ns)[last()], '}', $e/@ident )"/>
              <sch:let name="unique_elementSpecs"
                       value="distinct-values( $elementSpecs )"/>
              <sch:assert test="count( $elementSpecs ) eq count( $unique_elementSpecs )">
                <!-- Oops. If the number of unique elementSpecs (by
                     QName) is not the same as the number of
                     elementSpecs, then there is at least one
                     duplicate (maybe more) -->
                Duplicate elementSpec(s); the element specifications
                for the following each occur more than once: <sch:value-of select="string-join(
                ( for $qname in $unique_elementSpecs return if (count($elementSpecs[. eq $qname]) gt 1) then $qname else '' )[normalize-space(.)],
                ', ' ) "/>
              </sch:assert>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="ns" mode="change" usage="req"/>
            <attDef ident="docLang" mode="change">
              <desc versionDate="2022-04-03" xml:lang="en">
                specifies which language to use when creating
                documentation if the description for an element,
                attribute, class, or macro is available in more
                than one language
              </desc>
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.language"/>
              </datatype>
              <remarks xml:lang="en" versionDate="2022-06-05">
                <p>The current TEI ODD processor only handles 1 value as the value of <att>docLang</att>.</p>
              </remarks>
            </attDef>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <!-- ********************************* -->
        <!-- Alterations to other ODD elements -->
        <!-- ********************************* -->
        <elementSpec ident="altIdent" mode="change">
          <!-- Remove <altIdent> from model.glossLike, and require
               content to be an XML name. These changes should no
               longer be necessary after #2049 (and thus #2334) are
               solved. -->
          <classes mode="replace">
            <memberOf key="att.global"/>
            <memberOf key="att.typed"/>
          </classes>
          <content><dataRef key="teidata.xmlName"/></content>
        </elementSpec>
        
        <elementSpec ident="alternate" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="anyElement" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="attDef" mode="change">
          <content>
            <sequence>
              <elementRef key="altIdent" minOccurs="0" maxOccurs="1"/>
              <macroRef key="gloss_amper_desc"/>
              <elementRef key="datatype" minOccurs="0" maxOccurs="1"/>
              <elementRef key="constraintSpec" minOccurs="0" maxOccurs="unbounded"/>
              <elementRef key="defaultVal" minOccurs="0" maxOccurs="1"/>
              <alternate minOccurs="0" maxOccurs="1">
                <elementRef key="valList" minOccurs="1" maxOccurs="1"/>
                <elementRef key="valDesc" minOccurs="1" maxOccurs="1"/>
              </alternate>
            </sequence>
          </content>        
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="attList" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="attRef" mode="change">
          <!-- Should <attRef> even be allowed in a PLODD? -->
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="classes" mode="change">
          <attList>
            <attDef ident="mode"      mode="delete"/>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="classRef" mode="change">
          <!-- Should <classRef> even be allowed in a PLODD? -->
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="classSpec" mode="change">
          <content>
            <sequence>
              <elementRef key="altIdent" minOccurs="0" maxOccurs="1"/>
              <macroRef key="gloss_amper_desc"/>
              <elementRef key="classes" minOccurs="0" maxOccurs="1"/>
              <elementRef key="constraintSpec" minOccurs="0" maxOccurs="unbounded"/>
              <elementRef key="attList" minOccurs="0" maxOccurs="1"/>
            </sequence>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="constraint" mode="change">
          <content>
            <anyElement minOccurs="1" maxOccurs="unbounded" require="http://purl.oclc.org/dsdl/schematron http://www.schematron-quickfix.com/validator/process"/>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="constraintSpec" mode="change">
          <content>
            <macroRef key="gloss_amper_desc"/>
            <elementRef key="constraint" minOccurs="0" maxOccurs="1"/>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="content" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="dataFacet" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="dataRef" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
            <attDef ident="ref"       mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="dataSpec" mode="change">
          <content>
            <sequence>
              <macroRef key="gloss_amper_desc"/>
              <alternate minOccurs="0" maxOccurs="1">
                <elementRef key="content"/>
                <elementRef key="valList"/>
              </alternate>
              <elementRef key="constraintSpec" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="datatype" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="defaultVal" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="elementRef" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="elementSpec" mode="change">
          <content>
            <sequence>
              <elementRef key="altIdent" minOccurs="0" maxOccurs="1"/>
              <macroRef key="gloss_amper_desc"/>
              <elementRef key="classes" minOccurs="0" maxOccurs="1"/>
              <elementRef key="content" minOccurs="0" maxOccurs="1"/>
              <elementRef key="valList" minOccurs="0" maxOccurs="1"/>
              <elementRef key="constraintSpec" minOccurs="0" maxOccurs="unbounded"/>
              <elementRef key="attList" minOccurs="0" maxOccurs="1"/>
            </sequence>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="empty" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="macroRef" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="macroSpec" mode="change">
          <content>
            <sequence>
              <macroRef key="gloss_amper_desc"/>
              <alternate minOccurs="0" maxOccurs="1">
                <elementRef key="content" minOccurs="1" maxOccurs="1"/>
                <elementRef key="valList" minOccurs="1" maxOccurs="1"/>
              </alternate>
              <elementRef key="constraintSpec" minOccurs="0" maxOccurs="unbounded"/>
            </sequence>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="memberOf" mode="change">
          <content><empty/></content>
          <attList>
            <attDef ident="mode"      mode="delete"/>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="moduleRef" mode="change">
          <content>
            <elementRef key="content" minOccurs="1" maxOccurs="1"/>
          </content>
          <constraintSpec ident="only_rng_in_moduleRef_content" scheme="schematron">
            <constraint>
              <sch:report test="tei:content/*[ not( self::rng:* or self::a:* ) ]">
                The content of an ATOP PLODD module reference needs to
                be RELAX NG and RELAX NG *only*.
              </sch:report>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="mode"      mode="delete"/>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
            <attDef ident="include"   mode="delete"/>
            <attDef ident="except"    mode="delete"/>
            <attDef ident="key"       mode="delete"/>
            <attDef ident="url" mode="replace" usage="req">
              <desc>must be a freakin’ dot</desc>
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.enumerated"/>
              </datatype>
              <valList type="closed">
                <valItem ident=".">
                  <gloss>here, this file, local</gloss>
                  <desc>In an ATOP PLODD each <gi>moduleRef</gi>
                  should have a <att>url</att> with the value
                  <val>.</val> both so that it is clear and explicit
                  that the reference has been resolved, only the
                  content is to be copied over to the RELAX NG; and so
                  that the <gi>moduleRef</gi> is valid against vanilla
                  tei_all or tei_odds.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="schemaRef" mode="change">
          <attList>
            <!-- Has @url, but as it is descriptive it stays? -->
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="sequence" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="textNode" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="valDesc" mode="change">
          <attList>
            <attDef ident="xml:lang"  mode="change" usage="req"/>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="valItem" mode="change">
          <content>
            <macroRef key="gloss_amper_desc"/>
          </content>
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="valList" mode="change">
          <attList>
            <attDef ident="rend"      mode="delete"/>
            <attDef ident="style"     mode="delete"/>
            <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

        <elementSpec ident="gloss" mode="change">
          <attList>
            <attDef ident="xml:lang"  mode="change" usage="req"/>
          </attList>
        </elementSpec>

        <elementSpec ident="desc" mode="change">
          <attList>
            <attDef ident="xml:lang"  mode="change" usage="req"/>
          </attList>
        </elementSpec>

        <!-- ******************************** -->
        <!-- Deletion of unused model classes -->
        <!-- ******************************** -->
        <classSpec type="model" ident="model.divBottom"  mode="delete"/>
        <classSpec type="model" ident="model.divBottomPart"  mode="delete"/>
        <classSpec type="model" ident="model.divPart"  mode="delete"/>
        <classSpec type="model" ident="model.divTop"  mode="delete"/>
        <classSpec type="model" ident="model.divTopPart"  mode="delete"/>
        <classSpec type="model" ident="model.placeStateLike"  mode="delete"/>
        
        <!-- ***************************** -->
        <!-- Alterations to content models -->
        <!-- ***************************** -->
        <classSpec module="tei" type="model" ident="model.oddDecl" mode="change">
          <classes mode="replace"/>
        </classSpec>

        <!-- ********************************************************** -->
        <!-- Scorched earth removal of attributes that should not occur -->
        <!-- ********************************************************** -->
        <classSpec type="atts" ident="att.combinable"  mode="delete"/>
        <classSpec type="atts" ident="att.editLike"  mode="delete"/>
        <classSpec type="atts" ident="att.fragmentable"  mode="delete"/>

        <!-- ************************************************************************ -->
        <!-- Scorched earth removal of attributes that would be ignored in processing -->
        <!-- ************************************************************************ -->
        <classSpec type="atts" ident="att.anchoring"  mode="delete"/>
        <classSpec type="atts" ident="att.ascribed"  mode="delete"/>
        <classSpec type="atts" ident="att.ascribed.directed"  mode="delete"/>
        <classSpec type="atts" ident="att.cReferencing"  mode="delete"/>
        <classSpec type="atts" ident="att.canonical"  mode="delete"/>
        <classSpec type="atts" ident="att.datable"  mode="delete"/>
        <classSpec type="atts" ident="att.datable.custom"  mode="delete"/>
        <classSpec type="atts" ident="att.datable.iso"  mode="delete"/>
        <classSpec type="atts" ident="att.datable.w3c"  mode="delete"/>
        <classSpec type="atts" ident="att.declarable"  mode="delete"/>
        <classSpec type="atts" ident="att.declaring"  mode="delete"/>
        <classSpec type="atts" ident="att.dimensions"  mode="delete"/>
        <classSpec type="atts" ident="att.docStatus"  mode="delete"/>
        <classSpec type="atts" ident="att.global.responsibility"  mode="delete"/>
        <classSpec type="atts" ident="att.global.source"  mode="delete"/>
        <classSpec type="atts" ident="att.ranging"  mode="delete"/>
        <classSpec type="atts" ident="att.internetMedia"  mode="delete"/>
        <classSpec type="atts" ident="att.measurement"  mode="delete"/>
        <classSpec type="atts" ident="att.naming"  mode="delete"/>
        <classSpec type="atts" ident="att.notated"  mode="delete"/>
        <classSpec type="atts" ident="att.personal"  mode="delete"/>
        <classSpec type="atts" ident="att.placement"  mode="delete"/>
        <classSpec type="atts" ident="att.predicate"  mode="delete"/>
        <classSpec type="atts" ident="att.ranging"  mode="delete"/>
        <classSpec type="atts" ident="att.sortable"  mode="delete"/>
        <classSpec type="atts" ident="att.written"  mode="delete"/>
        
        <!-- ******************************** -->
        <!-- Selective thinning of attributes -->
        <!-- ******************************** -->
        <classRef key="att.identified" except="predeclare module"/>
        <classRef key="att.pointing" except="evaluate targetLang"/>
        
      </schemaSpec>
    </back>
  </text>
</TEI>
