<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" version="4.4.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Schema for derived ODD</title>
        <author xml:id="SB">Syd Bauman</author>
        <editor xml:id="MH">Martin Holmes</editor>
        <editor xml:id="HBS">Helena Bermúdez Sabel</editor>
        <editor xml:id="DM">David Maus</editor>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI-C / ATOP project</publisher>
        <availability status="restricted">
          <licence>Made available under both the CC+BY and BSD-2
          licences; see ../LICENSE.md for details.</licence>
          <p>There are very few restrictions on copying, modifying,
          and publishing this code or variations thereof. Basically
          give credit where credit is due, and allow others to do the
          same. That said, unless you are dealing with TEI ODD files
          derived by combining one or more TEI customization ODD files
          with a markup language that is itself defined in TEI ODD, it
          is probably not a good idea to copy and use this. It is
          pretty much useless for anything else.</p>
        </availability>
      </publicationStmt>
      <sourceDesc><p>Born digital</p></sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#SB" when="2022-06-24">Started from scratch.</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <p> ... </p>
    </body>
    <back>
      <schemaSpec ident="derivedSchemaSpecification" targetLang="en"
                  docLang="en" prefix="dS_" start="TEI schemaSpec">
        <gloss>derived schema specification</gloss>
        <desc>the ATOP derived schema document type</desc>

	<!-- ******** -->
	<!-- Modules! -->
	<!-- ******** -->
        <moduleRef key="tei"/>
        <moduleRef key="header" include="appInfo application creation
					 fileDesc publicationStmt schemaRef
					 sourceDesc teiHeader titleStmt "/>
        <moduleRef key="textstructure" include="TEI body text"/>
        <moduleRef key="core" include="abbr addrLine address
				       analytic author bibl
				       biblScope biblStruct choice
				       cit citedRange date
				       desc distinct email
				       emph expan foreign
				       gloss hi label
				       list listBibl measure
				       measureGrp mentioned monogr
				       name note noteGrp
				       num p postBox
				       postCode ptr q
				       quote ref relatedItem
				       rs said series
				       soCalled street term
				       time title unit"/>
        <moduleRef key="tagdocs" except="altIdent equiv exemplum
					 listRef remarks model
					 modelGrp modelSequence moduleSpec
					 moduleRef outputRendition param
					 paramList paramSpec specDesc
					 specGrp specGrpRef specList"/>

	<!-- ******************************************** -->
	<!-- General high-level constraint specifications -->
	<!-- ******************************************** -->
        <constraintSpec ident="no_XInclude" scheme="schematron">
          <desc>By this point in the pipeline, any and all XInclude
          processing should have already occurred. Note that this
          means that XInclude elements cannot be exemplified in their
          own namespace in an <gi>egXML</gi> (which is usually
          problematic, anyway).</desc>
          <constraint>
            <sch:ns uri="http://www.w3.org/2001/XInclude" prefix="xi"/>
            <sch:rule context="/">
              <sch:report test="//xi:*" role="fatal">There should be no XInclude elements in a derived ODD</sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>

        <constraintSpec scheme="schematron" ident="mode-child-sanity">
          <constraint>
            <sch:rule context="tei:*[ @mode eq 'delete' ]">
              <sch:report test="child::*">The specification element ＜<sch:name/>＞ has both a
              mode= of "delete" and child elements, which is incongruous</sch:report>
            </sch:rule>
            <sch:rule context="  tei:valList[ @mode = ('add','change','replace') ]
                               | tei:schemaSpec[ @mode = ('add','change','replace') ]
                               | tei:elementSpec[ @mode = ('add','change','replace') ]
                               | tei:classSpec[ @mode = ('add','change','replace') ]
                               | tei:macroSpec[ @mode = ('add','change','replace') ]
                               | tei:constraintSpec[ @mode = ('add','change','replace') ]
                               | tei:attDef[ @mode = ('add','change','replace') ]
                               | tei:classes[ @mode = ('add','change','replace') ]">
              <sch:assert test="child::* | (@* except (@mode, @ident))">The specification
              element ＜<sch:name/>＞ has a mode= of "<sch:value-of select="@mode"/>", but
              does not have any child elements or schema-changing attributes, which is
              incongruous</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>

	<!-- ********************************************************** -->
	<!-- Alterations to <schemaSpec> itself and elements “above” it -->
	<!-- ********************************************************** -->
        <elementSpec ident="body" mode="change">
          <desc>Contains a single schema specification</desc>
          <content>
            <elementRef minOccurs="1" maxOccurs="1" key="schemaSpec"/>
          </content>
        </elementSpec>

        <elementSpec ident="schemaSpec" mode="change">
          <content>
            <classRef minOccurs="0" maxOccurs="1" key="model.glossLike"/>
            <classRef minOccurs="0" maxOccurs="1" key="model.descLike"/>
            <classRef key="model.oddDecl" minOccurs="1" maxOccurs="unbounded"/>
          </content>
	  <constraintSpec ident="only_1_elementSpec_each" scheme="schematron">
	    <constraint>
	      <!-- generate sequence of the QName of each child <elementSpec> -->
	      <sch:let name="elementSpecs"
		       value="for $e in ./tei:elementSpec
			      return concat('{', ($e/ancestor-or-self::*/@ns)[last()], '}', $e/@ident )"/>
	      <sch:assert test="count( $elementSpecs ) eq count(distinct-values( $elementSpecs ) )">
		<!-- Oops. If the number of unique elementSpecs (by
		     QName) is not the same as the number of
		     elementSpecs, then there is at least one
		     duplicate (maybe more) -->
		Duplicate elementSpec(s); the element specifications
		for the following each occur more than once: <sch:value-of select="string-join(
		( for $qname in $unique_elementSpecs return if (count($elementSpecs[. eq $qname]) gt 1) then $qname else '' )[normalize-space(.)],
		', ' ) "/>
	      </sch:assert>
	    </constraint>
	  </constraintSpec>
          <attList>
	    <attDef ident="ns" mode="change" usage="req"/>
            <attDef ident="docLang" mode="change">
              <desc versionDate="2022-04-03" xml:lang="en">
                specifies which language to use when creating
                documentation if the description for an element,
                attribute, class, or macro is available in more
                than one language
              </desc>
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.language"/>
              </datatype>
              <remarks xml:lang="en" versionDate="2022-06-05">
                <p>The current TEI ODD processor only handles 1 value as the value of <att>docLang</att>.</p>
              </remarks>
            </attDef>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
        </elementSpec>

	<!-- ********************************* -->
	<!-- Alterations to other ODD elemetns -->
	<!-- ********************************* -->
	<elementSpec ident="alternate" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="anyElement" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="attDef" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="attList" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="attRef" mode="change">
	  <!-- Should <attRef> even be allowed in a PLODD? -->
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="classes" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="classRef" mode="change">
	  <!-- Should <classRef> even be allowed in a PLODD? -->
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="classSpec" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="constraint" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="constraintSpec" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="content" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="dataFacet" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="dataRef" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="dataSpec" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="datatype" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="defaultVal" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="elementRef" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="elementSpec" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="empty" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="macroRef" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="macroSpec" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="memberOf" mode="change">
	  <content><empty/></content>
	  <attList>
            <attDef ident="mode"      mode="delete"/>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="schemaRef" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="sequence" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="textNode" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="valDesc" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="valItem" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<elementSpec ident="valList" mode="change">
	  <attList>
	    <attDef ident="rend"      mode="delete"/>
	    <attDef ident="style"     mode="delete"/>
	    <attDef ident="rendition" mode="delete"/>
          </attList>
	</elementSpec>

	<!-- ******************************** -->
	<!-- Deletion of unused model classes -->
	<!-- ******************************** -->
	<classSpec type="model" ident="model.divBottom"  mode="delete"/>
	<classSpec type="model" ident="model.divBottomPart"  mode="delete"/>
	<classSpec type="model" ident="model.divPart"  mode="delete"/>
	<classSpec type="model" ident="model.divTop"  mode="delete"/>
	<classSpec type="model" ident="model.divTopPart"  mode="delete"/>
	<classSpec type="model" ident="model.placeStateLike"  mode="delete"/>
	
	<!-- ***************************** -->
	<!-- Alterations to content models -->
	<!-- ***************************** -->
	<classSpec module="tei" type="model" ident="model.oddDecl" mode="change">
	  <classes mode="replace"/>
	</classSpec>

	<!-- ********************************************************** -->
	<!-- Scorched earth removal of attributes that should not occur -->
	<!-- ********************************************************** -->
	<classSpec type="atts" ident="att.combinable"  mode="delete"/>
	<classSpec type="atts" ident="att.editLike"  mode="delete"/>
	<classSpec type="atts" ident="att.fragmentable"  mode="delete"/>

	<!-- ************************************************************************ -->
	<!-- Scorched earth removal of attributes that would be ignored in processing -->
	<!-- ************************************************************************ -->
	<classSpec type="atts" ident="att.anchoring"  mode="delete"/>
	<classSpec type="atts" ident="att.ascribed"  mode="delete"/>
	<classSpec type="atts" ident="att.ascribed.directed"  mode="delete"/>
	<classSpec type="atts" ident="att.cReferencing"  mode="delete"/>
	<classSpec type="atts" ident="att.canonical"  mode="delete"/> <!--??-->
	<classSpec type="atts" ident="att.datable"  mode="delete"/>
	<classSpec type="atts" ident="att.datable.custom"  mode="delete"/>
	<classSpec type="atts" ident="att.datable.iso"  mode="delete"/>
	<classSpec type="atts" ident="att.datable.w3c"  mode="delete"/>
	<classSpec type="atts" ident="att.declarable"  mode="delete"/>
	<classSpec type="atts" ident="att.declaring"  mode="delete"/>
	<classSpec type="atts" ident="att.deprecated"  mode="delete"/> <!--??-->
	<classSpec type="atts" ident="att.dimensions"  mode="delete"/>
	<classSpec type="atts" ident="att.docStatus"  mode="delete"/>
	<classSpec type="atts" ident="att.global.responsibility"  mode="delete"/>
	<classSpec type="atts" ident="att.global.source"  mode="delete"/>
	<classSpec type="atts" ident="att.ranging"  mode="delete"/>
	<classSpec type="atts" ident="att.internetMedia"  mode="delete"/>
	<classSpec type="atts" ident="att.measurement"  mode="delete"/>
	<classSpec type="atts" ident="att.naming"  mode="delete"/>
	<classSpec type="atts" ident="att.notated"  mode="delete"/>
	<classSpec type="atts" ident="att.personal"  mode="delete"/>
	<classSpec type="atts" ident="att.placement"  mode="delete"/> <!--??-->
	<classSpec type="atts" ident="att.predicate"  mode="delete"/>
	<classSpec type="atts" ident="att.ranging"  mode="delete"/>
	<classSpec type="atts" ident="att.sortable"  mode="delete"/>
	<classSpec type="atts" ident="att.written"  mode="delete"/>
	
	<!-- ******************************** -->
	<!-- Selective thinning of attributes -->
	<!-- ******************************** -->
	<classRef key="att.identified" except="predeclare module"/>
	<classRef key="att.pointing" except="evaluate targetLang"/>
	
      </schemaSpec>
    </back>
  </text>
</TEI>
